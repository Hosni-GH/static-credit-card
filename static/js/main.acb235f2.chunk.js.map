{"version":3,"sources":["credit-card.js","App.js","serviceWorker.js","index.js"],"names":["CardTitle","className","Chip","src","alt","CardNumber","CodeValid","CardHolder","CreditCard","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPACMA,G,UAAY,WACd,OAAO,yBAAKC,UAAU,mBACV,8CAGVC,EAAO,WACT,OAAO,yBAAKD,UAAU,kBACV,yBAAKE,IAAI,4FAA4FC,IAAI,OAGnHC,EAAa,WACf,OAAO,yBAAKJ,UAAU,eACV,mCAAW,oCADhB,IAC6B,mCAD7B,IACyC,qCAG9CK,EAAY,WACd,OAAO,yBAAKL,UAAU,cACV,yBAAKA,UAAU,aACX,uBAAGA,UAAU,eAAb,SAEJ,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,cACX,0CAEJ,yBAAKA,UAAU,cACX,yBAAKA,UAAU,eACX,mCAAQ,6BAAR,SAEJ,6BACA,uBAAGA,UAAU,wBAEb,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,eAAb,cAMtBM,EAAa,WACf,OAAO,yBAAKN,UAAU,eACV,uBAAGA,UAAU,eAAb,kBAoBDO,EAjBI,WACnB,OAAO,yBAAKP,UAAU,kBAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,UACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,iBACX,yBAAKE,IAAI,gCAA8BC,IAAI,SC3CxCK,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.acb235f2.chunk.js","sourcesContent":["import React from 'react';\r\nconst CardTitle = () => {\r\n    return <div className=\"title-container\">\r\n                <h1>Credit Card</h1>\r\n            </div>\r\n}\r\nconst Chip = () => {\r\n    return <div className=\"chip-container\">\r\n                <img src=\"https://cdn.iconscout.com/icon/premium/png-512-thumb/credit-card-chip-1522262-1288452.png\" alt=\"\" />\r\n            </div>\r\n}\r\nconst CardNumber = () => {\r\n    return <div className=\"card-number\">\r\n                <p>7253</p><p> 3256</p> <p>7895</p> <p>1245</p>\r\n            </div>\r\n}\r\nconst CodeValid = () =>{\r\n    return <div className=\"code-valid\">\r\n                <div className=\"card-code\">\r\n                    <p className=\"bold-effect\">5422</p>\r\n                </div>\r\n                <div className=\"card-validation\">\r\n                    <div className=\"month-year\">\r\n                        <p>Month/Year</p>\r\n                    </div>\r\n                    <div className=\"valid-thru\">\r\n                        <div className=\"valid-until\">\r\n                            <p>VALID<br/>THRU</p>\r\n                        </div>\r\n                        <div>\r\n                        <i className=\"fas fa-caret-right\"></i>\r\n                        </div>\r\n                        <div className=\"month-year-value\">\r\n                            <p className=\"bold-effect\">11/50</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n}\r\nconst CardHolder = () =>{\r\n    return <div className=\"card-holder\">\r\n                <p className=\"bold-effect\">HoSni GhRibi</p>\r\n           </div>\r\n}\r\nconst CreditCard = () => {\r\nreturn <div className=\"main-container\">\r\n    <CardTitle/>\r\n    <Chip/>\r\n    <div className=\"footer\">\r\n        <div className=\"info-container\">\r\n            <CardNumber/> \r\n            <CodeValid/>\r\n            <CardHolder/>  \r\n        </div>\r\n        <div className=\"imgs-conainer\">\r\n            <img src=\".\\imgs\\visa-master-card.PNG\" alt=\"\"/>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n}\r\nexport default CreditCard;","import React from 'react';\nimport './App.css';\nimport CreditCard from './credit-card';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CreditCard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}